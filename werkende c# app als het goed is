using Android.App;
using Android.OS;
using Android.Views;
using Android.Graphics;
using Android.Content;
using Android.Content.PM;
using System;


namespace Android_eyes
{
    [Activity(Label = "Android_eyes", MainLauncher = true, ScreenOrientation = ScreenOrientation.Landscape)]

    public class Android_eyes : Activity
    {

        protected override void OnCreate(Bundle savedInstanceState)
        {
            base.OnCreate(savedInstanceState);
            Android_eyesView Android_eyes;
            Android_eyes= new Android_eyesView(this);
            this.SetContentView(Android_eyes);
        }

        public class Android_eyesView : View
        {
            public Android_eyesView(Context c) : base(c)
            {
                this.SetBackgroundColor(Color.Brown);
                this.Touch += Aanraking;
            }
            PointF punt;

            public void Aanraking(object sender, TouchEventArgs e)
            {
                float a = e.Event.GetX();
                float b = e.Event.GetY();
                this.punt = new PointF(a, b);
                this.Invalidate();
            }

            protected override void OnDraw(Canvas cv)
            {
                int x, y, r;
                x = cv.Width / 4;
                y = cv.Height / 2;
                r = 300;
                base.OnDraw(cv);
                this.TekenOog(cv, x, y, r);
                this.TekenOog(cv, x * 3, y, r);
            }

            private void TekenOog(Canvas cv, int x, int y, int r)
            {      
                // Tekenen van het oog
                Paint verf = new Paint();
                verf.SetStyle(Paint.Style.Fill);
                verf.Color = Color.White;
                cv.DrawCircle(x, y, r, verf);
                float rp = 40;

                // Tekenen van de pupil
                if (punt != null)
                {
                    float dx, dy;
                    double d, pd, pa, pb, px, py;
                    Paint pupil = new Paint();
                    pupil.SetStyle(Paint.Style.Fill);
                    pupil.Color = Color.Black;
                    float Vx = punt.X;
                    float Vy = punt.Y;
                    dx = Vx - (float)x;
                    dy = Vy - y;
                    d = Math.Sqrt(dx * dx + dy * dy);
                    pd = r - rp;
                    pa = (pd / d) * dx;
                    pb = (pd / d) * dy;
                    px = pa + x;
                    py = pb + y;
                    cv.DrawCircle((float)px, (float)py, rp, pupil);
                }
                else
                {
                    Paint pupil1 = new Paint();
                    pupil1.SetStyle(Paint.Style.Fill);
                    pupil1.Color = Color.Black;
                    cv.DrawCircle(x, y, rp, pupil1);
                }
            }
        }
    }
}
